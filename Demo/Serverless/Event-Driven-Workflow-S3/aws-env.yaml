AWSTemplateFormatVersion: "2010-09-09"
Description: This contains the pixelator demo

Outputs:
  LambdaFunction:
    Description: The lambda function created
    Value: !GetAtt MyLambda.Arn

Resources:
  # S3 Bucket which will store all of the processed images
  PixelatorProcessedBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub "pixalator-${AWS::AccountId}-${AWS::Region}-processed"

  # S3 Buckets where the images can be uploaded to trigger lambda
  PixelatorSourceBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub "pixalator-${AWS::AccountId}-${AWS::Region}-source"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt PixelatorFunction.Arn

  # S3 will be allowed to invoke the Lambda function
  PixelatorFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PixelatorFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceArn: !GetAtt PixelatorSourceBucket.Arn

  # Pixelator Function that will generate the separate images
  PixelatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Pixelator
      Timeout: 60
      Environment:
        Variables:
          proceessed_bucket: !Ref PixelatorProcessedBucket
      Code:
        ZipFile: !Sub |
          import os
          import json
          import uuid
          import boto3

          from PIL import Image

          # bucketname for pixelated images
          processed_bucket=os.environ['processed_bucket']

          s3_client = boto3.client('s3')

          def lambda_handler(event, context):
            print(event)
            
            # get bucket and object key from event object
            source_bucket = event['Records'][0]['s3']['bucket']['name']
            key = event['Records'][0]['s3']['object']['key']
            
            # Generate a temp name, and set location for our original image
            object_key = str(uuid.uuid4()) + '-' + key
            img_download_path = '/tmp/{}'.format(object_key)
            
            # Download the source image from S3 to temp location within execution environment
            with open(img_download_path,'wb') as img_file:
              s3_client.download_fileobj(source_bucket, key, img_file)
              
            # Biggify the pixels and store temp pixelated versions
            pixelate((8,8), img_download_path, '/tmp/pixelated-8x8-{}'.format(object_key) )
            pixelate((16,16), img_download_path, '/tmp/pixelated-16x16-{}'.format(object_key) )
            pixelate((32,32), img_download_path, '/tmp/pixelated-32x32-{}'.format(object_key) )
            pixelate((48,48), img_download_path, '/tmp/pixelated-48x48-{}'.format(object_key) )
            pixelate((64,64), img_download_path, '/tmp/pixelated-64x64-{}'.format(object_key) )
            
            # uploading the pixelated version to destination bucket
            upload_key = 'pixelated-{}'.format(object_key)
            s3_client.upload_file('/tmp/pixelated-8x8-{}'.format(object_key), processed_bucket,'pixelated-8x8-{}'.format(key))
            s3_client.upload_file('/tmp/pixelated-16x16-{}'.format(object_key), processed_bucket,'pixelated-16x16-{}'.format(key))
            s3_client.upload_file('/tmp/pixelated-32x32-{}'.format(object_key), processed_bucket,'pixelated-32x32-{}'.format(key))
            s3_client.upload_file('/tmp/pixelated-48x48-{}'.format(object_key), processed_bucket,'pixelated-48x48-{}'.format(key))
            s3_client.upload_file('/tmp/pixelated-64x64-{}'.format(object_key), processed_bucket,'pixelated-64x64-{}'.format(key))
            
          def pixelate(pixelsize, image_path, pixelated_img_path):
            img = Image.open(image_path)
            temp_img = img.resize(pixelsize, Image.BILINEAR)
            new_img = temp_img.resize(img.size, Image.NEAREST)
            new_img.save(pixelated_img_path)
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'PixelatorRole'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: 
                  - !Sub 'arn:aws:s3:::${PixelatorProcessedBucket}'
                  - !Sub 'arn:aws:s3:::${PixelatorProcessedBucket}/*'
                  - !Sub 'arn:aws:s3:::${PixelatorSourceBucket}/*'
                  - !Sub 'arn:aws:s3:::${PixelatorSourceBucket}'
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/pixelator"