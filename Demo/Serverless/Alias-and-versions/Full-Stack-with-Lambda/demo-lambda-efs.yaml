AWSTemplateFormatVersion: "2010-09-09"
Description:
Parameters:
  AvailabilityZones:
    Description: Choose at least 2 Availability Zones from the Region
    Type: List<AWS::EC2::AvailabilityZone::Name>
Resources:
  # Development VPC with 4096 IP addresses
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/20
      EnableDnsSupport: true

  # Internet Gateway to allow the VPC to connect to the Internet
  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Development-IGW

  # Attach the Internet Gateway to the VPC
  AttachVPCGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref VPCInternetGateway

  # Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24  # Adjust CIDR block as needed
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Development-Public-Subnet-A

  # Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24  # Adjust CIDR block as needed
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Development-Public-Subnet-B

  # Public Route Table Providing path to resources
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "Publice-Subnet-Route-Table"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCInternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private Route table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "Private-Subnet-Route-Table"

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # NAT Gateway to allows internet-bound traffic from private subnet to the device
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: Development-NGW

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway


  # Private Subnet configured to have 256 IP addresses
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      Tags:
        - Key: Name
          Value: Development-Private-Subnet-A

  # Private Subnet configured to have 256 IP addresses
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      Tags:
        - Key: Name
          Value: Development-Private-Subnet-B

  # EFS FileSystem
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
          - Key: Name
            Value: Development-EFS

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AmazonElasticFileSystemClientFullAccess


